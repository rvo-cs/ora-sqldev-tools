<?xml version="1.0" encoding="UTF-8" ?>
<!--
  SPDX-FileCopyrightText: 2018-2022 R.Vassallo
  SPDX-License-Identifier: BSD Zero Clause License
 -->
<displays>
<folder>
<name><![CDATA[AWR]]></name>
<display id="2811adb9-0167-1000-8001-c0a83801697b" type="" style="Table" enable="true">
	<name><![CDATA[AWR - Available snapshots]]></name>
	<description><![CDATA[Lists available AWR snapshots covering the specified time range.]]></description>
	<tooltip><![CDATA[]]></tooltip>
	<drillclass><![CDATA[]]></drillclass>
	<CustomValues>
		<TYPE><![CDATA[horizontal]]></TYPE>
	</CustomValues>
    <queries>
	<query minversion="12.1">
		<sql><![CDATA[with 
awr_snapshots as (
    select
        dbid, con_id,
        instance_number, 
        cast(startup_time as date) as inst_startup_time, 
        case 
            when startup_time = lag(startup_time) 
                    over (partition by dbid, instance_number order by snap_id) 
            then '0' else '1' end as startup_indic,
        snap_id, 
        cast(begin_interval_time as date) as begin_interval_time, 
        cast(end_interval_time as date) as end_interval_time, 
        end_interval_time - begin_interval_time as snap_duration,
        snap_level, 
        error_count, 
        snap_flag, 
        flush_elapsed, 
        snap_timezone
    from
        dba_hist_snapshot
    where
        (lnnvl(upper(:CURRENT_DBID_ONLY) = 'Y') or dbid = (select dbid from v$database))
        and (:DBID is null or dbid = :DBID)
        and (lnnvl(upper(:CURRENT_INSTANCE_ONLY) = 'Y') or instance_number = sys_context('USERENV', 'INSTANCE'))
        and (:INST_ID is null or instance_number = :INST_ID)
        and (:FROM_TIME is null or end_interval_time >= to_date(:FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'))
        and (:TO_TIME is null or begin_interval_time <= to_date(:TO_TIME, 'YYYY-MM-DD HH24:MI:SS'))
),
awr_snapshots_wt_startup_count as (
    select
        dbid, con_id, instance_number, inst_startup_time, 
        sum(startup_indic) over (partition by dbid, instance_number order by snap_id
                rows between unbounded preceding and current row) 
            as cnt_startup, 
        snap_id, begin_interval_time, end_interval_time, 
        snap_duration, snap_level, error_count, 
        snap_flag, flush_elapsed, snap_timezone
    from
        awr_snapshots
),
awr_snapshots_wt_restart_flag as (
    select
        dbid, con_id, instance_number, inst_startup_time, cnt_startup,
        case 
            when count(distinct cnt_startup) over (partition by dbid, instance_number) > 1
            then 'Y' end as restart_flag,
        case
            when count(distinct cnt_startup) over (partition by dbid, instance_number) > 1
                or (:FROM_TIME is not null 
                    and min(begin_interval_time) over (partition by dbid, instance_number)
                        > to_date(:FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'))
                or (:TO_TIME is not null 
                    and max(end_interval_time) over (partition by dbid, instance_number)
                        < to_date(:TO_TIME, 'YYYY-MM-DD HH24:MI:SS'))
            then 'Y' end as partial_cover_flag,            
        snap_id, begin_interval_time, end_interval_time, 
        snap_duration, snap_level, error_count,
        snap_flag, flush_elapsed, snap_timezone
    from
        awr_snapshots_wt_startup_count
)
select 
    dbid,
    case
        when sys_context('USERENV', 'CDB_NAME') is not null and con_id = 0
        then 'CDB$ROOT'
        when sys_context('USERENV', 'CDB_NAME') is not null and con_id <> 0
        then
           (select max(b.con$name) from cdb_hist_database_instance b
             where b.dbid = a.dbid
             group by b.dbid
            having count(distinct b.con$name) = 1)
    end  as con_name,
    instance_number as inst_id, 
    snap_id, 
    inst_startup_time as "Inst. start time", 
    cnt_startup as "Startup #", 
    restart_flag as "Restarted?", 
    partial_cover_flag as "Part. coverage?",
    begin_interval_time, end_interval_time, snap_duration,
    snap_level, error_count, snap_flag, 
    flush_elapsed, snap_timezone
from
    awr_snapshots_wt_restart_flag a
where
    (upper(:ALLOW_RESTART) = 'Y' or restart_flag is null)
    and (upper(:ALLOW_PARTIAL_COVER) = 'Y' or partial_cover_flag is null)
order by
    dbid,
    instance_number,
    snap_id]]></sql>
		<binds>
			<bind id="CURRENT_DBID_ONLY">
				<prompt><![CDATA[Current DBID only?]]></prompt>
				<tooltip><![CDATA[Restrict to the current DBID if 'Y']]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="CURRENT_INSTANCE_ONLY">
				<prompt><![CDATA[Current instance only?]]></prompt>
				<tooltip><![CDATA[Restrict to the current instance if 'Y']]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="DBID">
				<prompt><![CDATA[DB id?]]></prompt>
				<tooltip><![CDATA[Restrict to the specified DB id]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="INST_ID">
				<prompt><![CDATA[Instance id?]]></prompt>
				<tooltip><![CDATA[Restrict to the specified instance]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="FROM_TIME">
				<prompt><![CDATA[From time?]]></prompt>
				<tooltip><![CDATA[From time (YYYY-MM-DD HH24:MI:SS)]]></tooltip>
				<value><![CDATA[2025-01-01 00:00:00]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="TO_TIME">
				<prompt><![CDATA[To time?]]></prompt>
				<tooltip><![CDATA[To time (YYYY-MM-DD HH24:MI:SS)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="ALLOW_RESTART">
				<prompt><![CDATA[Allow instance restarts?]]></prompt>
				<tooltip><![CDATA[Unless 'Y', show no result if an instance restart has happened]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="ALLOW_PARTIAL_COVER">
				<prompt><![CDATA[Allow partial time coverage?]]></prompt>
				<tooltip><![CDATA[Unless 'Y', show no result if the specified time range is not fully covered]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
		</binds>
	</query>
	<query>
		<sql><![CDATA[with 
awr_snapshots as (
    select
        dbid, 
        instance_number, 
        cast(startup_time as date) as inst_startup_time, 
        case 
            when startup_time = lag(startup_time) 
                    over (partition by dbid, instance_number order by snap_id) 
            then '0' else '1' end as startup_indic,
        snap_id, 
        cast(begin_interval_time as date) as begin_interval_time, 
        cast(end_interval_time as date) as end_interval_time, 
        end_interval_time - begin_interval_time as snap_duration,
        snap_level, 
        error_count, 
        snap_flag, 
        flush_elapsed, 
        snap_timezone
    from
        dba_hist_snapshot
    where
        (lnnvl(upper(:CURRENT_DBID_ONLY) = 'Y') or dbid = (select dbid from v$database))
        and (:DBID is null or dbid = :DBID)
        and (lnnvl(upper(:CURRENT_INSTANCE_ONLY) = 'Y') or instance_number = sys_context('USERENV', 'INSTANCE'))
        and (:INST_ID is null or instance_number = :INST_ID)
        and (:FROM_TIME is null or end_interval_time >= to_date(:FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'))
        and (:TO_TIME is null or begin_interval_time <= to_date(:TO_TIME, 'YYYY-MM-DD HH24:MI:SS'))
),
awr_snapshots_wt_startup_count as (
    select
        dbid, instance_number, inst_startup_time, 
        sum(startup_indic) over (partition by dbid, instance_number order by snap_id
                rows between unbounded preceding and current row) 
            as cnt_startup, 
        snap_id, begin_interval_time, end_interval_time, 
        snap_duration, snap_level, error_count, 
        snap_flag, flush_elapsed, snap_timezone
    from
        awr_snapshots
),
awr_snapshots_wt_restart_flag as (
    select
        dbid, instance_number, inst_startup_time, cnt_startup,
        case 
            when count(distinct cnt_startup) over (partition by dbid, instance_number) > 1
            then 'Y' end as restart_flag,
        case
            when count(distinct cnt_startup) over (partition by dbid, instance_number) > 1
                or (:FROM_TIME is not null 
                    and min(begin_interval_time) over (partition by dbid, instance_number)
                        > to_date(:FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'))
                or (:TO_TIME is not null 
                    and max(end_interval_time) over (partition by dbid, instance_number)
                        < to_date(:TO_TIME, 'YYYY-MM-DD HH24:MI:SS'))
            then 'Y' end as partial_cover_flag,            
        snap_id, begin_interval_time, end_interval_time, 
        snap_duration, snap_level, error_count,
        snap_flag, flush_elapsed, snap_timezone
    from
        awr_snapshots_wt_startup_count
)
select 
    dbid, 
    instance_number as inst_id, 
    snap_id, 
    inst_startup_time as "Inst. start time", 
    cnt_startup as "Startup #", 
    restart_flag as "Restarted?", 
    partial_cover_flag as "Part. coverage?",
    begin_interval_time, end_interval_time, snap_duration,
    snap_level, error_count, snap_flag, 
    flush_elapsed, snap_timezone
from
    awr_snapshots_wt_restart_flag
where
    (upper(:ALLOW_RESTART) = 'Y' or restart_flag is null)
    and (upper(:ALLOW_PARTIAL_COVER) = 'Y' or partial_cover_flag is null)
order by
    dbid,
    instance_number,
    snap_id]]></sql>
		<binds>
			<bind id="CURRENT_DBID_ONLY">
				<prompt><![CDATA[Current DBID only?]]></prompt>
				<tooltip><![CDATA[Restrict to the current DBID if 'Y']]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="CURRENT_INSTANCE_ONLY">
				<prompt><![CDATA[Current instance only?]]></prompt>
				<tooltip><![CDATA[Restrict to the current instance if 'Y']]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="DBID">
				<prompt><![CDATA[DB id?]]></prompt>
				<tooltip><![CDATA[Restrict to the specified DB id]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="INST_ID">
				<prompt><![CDATA[Instance id?]]></prompt>
				<tooltip><![CDATA[Restrict to the specified instance]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="FROM_TIME">
				<prompt><![CDATA[From time?]]></prompt>
				<tooltip><![CDATA[From time (YYYY-MM-DD HH24:MI:SS)]]></tooltip>
				<value><![CDATA[2021-10-01 00:00:00]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="TO_TIME">
				<prompt><![CDATA[To time?]]></prompt>
				<tooltip><![CDATA[To time (YYYY-MM-DD HH24:MI:SS)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="ALLOW_RESTART">
				<prompt><![CDATA[Allow instance restarts?]]></prompt>
				<tooltip><![CDATA[Unless 'Y', show no result if an instance restart has happened]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="ALLOW_PARTIAL_COVER">
				<prompt><![CDATA[Allow partial time coverage?]]></prompt>
				<tooltip><![CDATA[Unless 'Y', show no result if the specified time range is not fully covered]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
		</binds>
	</query>
    </queries>
</display>
</folder>
</displays>
