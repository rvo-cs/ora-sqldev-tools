<?xml version="1.0" encoding="UTF-8" ?>
<!--
  SPDX-FileCopyrightText: 2021-2024 R.Vassallo
  SPDX-License-Identifier: BSD Zero Clause License
 -->
<displays>
<folder>
<name><![CDATA[AWR]]></name>
<display id="cfdd286e-0177-1000-8001-c0a8010c0f96" type="" style="Table" enable="true">
	<name><![CDATA[AWR - SQL Monitoring Report]]></name>
	<description><![CDATA[12c onlyâ€”SQL Monitoring Reports persisted in AWR ]]></description>
	<tooltip><![CDATA[]]></tooltip>
	<drillclass><![CDATA[]]></drillclass>
	<CustomValues>
		<TYPE><![CDATA[horizontal]]></TYPE>
	</CustomValues>
	<query>
		<sql><![CDATA[with 
awr_sqlmonitor_summary as (
    select
        a.*, b.*
    from
        (select
            r.snap_id, r.dbid, r.instance_number,
            r.report_id,
            xmlparse(document r.report_summary wellformed) as xml_report_summary
        from 
            dba_hist_reports r,
            dba_hist_snapshot s
        where
            r.component_name = 'sqlmonitor'
            and r.dbid = s.dbid 
            and r.instance_number = s.instance_number
            and r.snap_id = s.snap_id
            and s.con_id = 0
            and s.dbid = nvl(:B_DBID, (select dbid from v$database))
            and (:B_INST_ID = '*'
                  or s.instance_number = nvl(nullif(:B_INST_ID, '*'), sys_context('USERENV', 'INSTANCE')))
            and s.begin_interval_time >= 
                    nvl(to_date(:B_FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'), sysdate - 14) - 1/24
            and s.end_interval_time <=
                    nvl(to_date(:B_TO_TIME, 'YYYY-MM-DD HH24:MI:SS'), sysdate) + 1/24
        ) a,
        xmltable(
            '/report_repository_summary/sql'
            passing a.xml_report_summary
            columns
                sql_id              varchar2(20 byte)   path '@sql_id',
                sql_exec_start      varchar2(20 byte)   path '@sql_exec_start',
                sql_exec_id         number              path '@sql_exec_id',
                status              varchar2(20 byte)   path 'status',
                sql_text            varchar2(2000 byte) path 'sql_text',
                last_refresh_time   varchar2(20 byte)   path 'last_refresh_time',
                refresh_count       number              path 'refresh_count',
                session_id          number              path 'session_id',
                session_serial#     number              path 'session_serial',
                user_id             number              path 'user_id',
                con_id              number              path 'con_id',
                con_name            varchar2(128 byte)  path 'con_name',
                module              varchar2(64 byte)   path 'module',
                action              varchar2(64 byte)   path 'action',
                service             varchar2(64 byte)   path 'service',
                program             varchar2(48 byte)   path 'program',
                plan_hash           number              path 'plan_hash',
                is_cross_instance   varchar2(1 byte)    path 'is_cross_instance',
                dop                 number              path 'dop',
                instances           number              path 'instances',
                px_servers_requested number             path 'px_servers_requested',
                px_servers_allocated number             path 'px_servers_allocated',
                duration            number              path 'stats[@type="monitor"]/stat[@name="duration"]',
                elapsed_time        number              path 'stats[@type="monitor"]/stat[@name="elapsed_time"]',
                cpu_time            number              path 'stats[@type="monitor"]/stat[@name="cpu_time"]',
                user_io_wait_time   number              path 'stats[@type="monitor"]/stat[@name="user_io_wait_time"]',
                concurrency_wait_time number            path 'stats[@type="monitor"]/stat[@name="concurrency_wait_time"]',
                other_wait_time     number              path 'stats[@type="monitor"]/stat[@name="other_wait_time"]',
                user_fetch_count    number              path 'stats[@type="monitor"]/stat[@name="user_fetch_count"]',
                buffer_gets         number              path 'stats[@type="monitor"]/stat[@name="buffer_gets"]',
                read_reqs           number              path 'stats[@type="monitor"]/stat[@name="read_reqs"]',
                read_bytes          number              path 'stats[@type="monitor"]/stat[@name="read_bytes"]'
        ) b
),
awr_sqlmonitor_summary_wt_date as (
    select
        con_id,
        con_name,
        instance_number  as inst_id,
        report_id,
        --xml_report_summary,
        sql_id, 
        to_date(sql_exec_start, 'MM/DD/YYYY HH24:MI:SS')  as sql_exec_start, 
        sql_exec_id, 
        plan_hash,
        status,
        sql_text, 
        to_date(last_refresh_time, 'MM/DD/YYYY HH24:MI:SS')  as last_refresh_time,
        refresh_count,
        session_id, session_serial#, 
        service, 
        user_id,
        module, action, program, 
        is_cross_instance, dop, instances, 
        px_servers_requested, px_servers_allocated, 
        duration, 
        elapsed_time, 
        cpu_time, 
        nvl(user_io_wait_time     , 0)  as user_io_wait_time,
        nvl(concurrency_wait_time , 0)  as concurrency_wait_time,
        nvl(other_wait_time       , 0)  as other_wait_time,
        user_fetch_count, 
        buffer_gets, 
        nvl(read_reqs  , 0)  as read_reqs,
        nvl(read_bytes , 0)  as read_bytes
    from 
        awr_sqlmonitor_summary
)
select /*+ no_parallel */
    c.con_name,
    c.service, 
    c.inst_id,
    --xml_report_summary,
    c.report_id,
    c.status,
    c.sql_id, c.sql_exec_id,
    to_char(c.sql_exec_start, 'YYYY-MM-DD HH24:MI:SS') as sql_exec_start,  /* <-- Note: TO_CHAR needed here because SQL Dev seems to
                                                                                  have trouble passing DATE binds to child reports */
    d.username,
    c.sql_text, 
    --c.session_id, c.session_serial#, 
    c.last_refresh_time, c.refresh_count,
    round( c.duration                   , greatest(0, 2 - floor(log(10, nvl(nullif(abs( c.duration ), 0), 1)))) )                    as duration, 
    round( c.elapsed_time / power(10,6) , greatest(0, 2 - floor(log(10, nvl(nullif(abs( c.elapsed_time / power(10,6) ), 0), 1)))) )  as elapsed_time_s, 
    round( c.cpu_time     / power(10,6) , greatest(0, 2 - floor(log(10, nvl(nullif(abs( c.cpu_time     / power(10,6) ), 0), 1)))) )  as cpu_time_s, 
    c.plan_hash,
    c.user_fetch_count,
    c.buffer_gets, 
    c.read_reqs, 
    round( c.read_bytes            / power(2,20) , greatest(0, 2 - floor(log(10, nvl(nullif(abs( c.read_bytes            / power(2,20) ), 0), 1)))) )  as read_mbytes,
    round( c.user_io_wait_time     / power(10,6) , greatest(0, 2 - floor(log(10, nvl(nullif(abs( c.user_io_wait_time     / power(10,6) ), 0), 1)))) )  as user_io_wait_time_s, 
    round( c.concurrency_wait_time / power(10,6) , greatest(0, 2 - floor(log(10, nvl(nullif(abs( c.concurrency_wait_time / power(10,6) ), 0), 1)))) )  as concurrency_wait_time_s, 
    round( c.other_wait_time       / power(10,6) , greatest(0, 2 - floor(log(10, nvl(nullif(abs( c.other_wait_time       / power(10,6) ), 0), 1)))) )  as other_wait_time_s,
    c.dop, c.px_servers_requested, c.px_servers_allocated, 
    c.is_cross_instance, c.instances, 
    c.program, c.module, c.action,
    :B_PLAN_DISPLAY_FORMAT as plan_display_fmt,
    coalesce(:B_SPOOL_DIRECTORY, :B_DEFAULT_SPOOL_DIRECTORY) as spool_directory
from 
    awr_sqlmonitor_summary_wt_date c,
    cdb_users d 
where 
    d.con_id (+) = c.con_id 
    and d.user_id (+) = c.user_id
    and c.last_refresh_time >= nvl(to_date(:B_FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'), sysdate - 14)
    and c.sql_exec_start <= nvl(to_date(:B_TO_TIME, 'YYYY-MM-DD HH24:MI:SS'), sysdate)
    and lnnvl(c.sql_id <> :B_SQL_ID)
    and (:B_SERVICE_LIKE is null or upper(c.service) like upper(:B_SERVICE_LIKE))
    and (:B_USERNAME_LIKE is null or upper(d.username) like upper(:B_USERNAME_LIKE))
    and (:B_USERNAME_RE is null or regexp_like(d.username, :B_USERNAME_RE, 'i'))
    and (:B_USERNAME_NOT_LIKE is null or lnnvl(upper(d.username) like upper(:B_USERNAME_NOT_LIKE)))
    and (:B_USERNAME_NOT_RE is null or lnnvl(regexp_like(d.username, :B_USERNAME_NOT_RE, 'i')))
    and (:B_MODULE_LIKE is null or upper(c.module) like upper(:B_MODULE_LIKE))
    and (:B_MODULE_RE is null or regexp_like(c.module, :B_MODULE_RE, 'i'))
    and (:B_ACTION_LIKE is null or upper(c.action) like upper(:B_ACTION_LIKE))
    and (:B_ACTION_RE is null or regexp_like(c.action, :B_ACTION_RE, 'i'))
    and (lnnvl(upper(:B_EXCLUDE_BACKGROUND) = 'Y') or c.service <> 'SYS$BACKGROUND')
order by
    c.last_refresh_time desc, c.elapsed_time desc, 
    c.sql_exec_start asc, c.report_id asc]]></sql>
		<binds>
			<bind id="B_DBID">
				<prompt><![CDATA[Database Id?]]></prompt>
				<tooltip><![CDATA[Database Id; null = current database]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_INST_ID">
				<prompt><![CDATA[Instance Id?]]></prompt>
				<tooltip><![CDATA[Instance Id; null = current instance; * = all]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_FROM_TIME">
				<prompt><![CDATA[From time?]]></prompt>
				<tooltip><![CDATA[Start time (YYYY-MM-DD HH24:MI:SS); default: sysdate - 14]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_TO_TIME">
				<prompt><![CDATA[To time?]]></prompt>
				<tooltip><![CDATA[To time (YYYY-MM-DD H24:MI:SS); default: sysdate]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_SQL_ID">
				<prompt><![CDATA[SQL id?]]></prompt>
				<tooltip><![CDATA[Show reports for the specified SQL id only]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_SERVICE_LIKE">
				<prompt><![CDATA[Service like?]]></prompt>
				<tooltip><![CDATA[Show only queries from matching services (LIKE pattern)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_USERNAME_LIKE">
				<prompt><![CDATA[Username like?]]></prompt>
				<tooltip><![CDATA[Show only queries of matching users (LIKE pattern)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_USERNAME_RE">
				<prompt><![CDATA[Username regexp?]]></prompt>
				<tooltip><![CDATA[Show only queries of matching users (regexp)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_USERNAME_NOT_LIKE">
				<prompt><![CDATA[Username not like?]]></prompt>
				<tooltip><![CDATA[Hide queries of matching users (LIKE pattern)]]></tooltip>
				<value><![CDATA[SYS]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_USERNAME_NOT_RE">
				<prompt><![CDATA[Username negative regexp?]]></prompt>
				<tooltip><![CDATA[Hide queries of matching users (regexp)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_MODULE_LIKE">
				<prompt><![CDATA[Module like?]]></prompt>
				<tooltip><![CDATA[Show only queries with matching modules (LIKE pattern)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_MODULE_RE">
				<prompt><![CDATA[Module regexp?]]></prompt>
				<tooltip><![CDATA[Show only queries with matching modules (regexp)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_ACTION_LIKE">
				<prompt><![CDATA[Action like?]]></prompt>
				<tooltip><![CDATA[Show only queries with matching actions (LIKE pattern)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_ACTION_RE">
				<prompt><![CDATA[Action regexp?]]></prompt>
				<tooltip><![CDATA[Show only queries with matching actions (regexp)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_EXCLUDE_BACKGROUND">
				<prompt><![CDATA[Exclude badkground?]]></prompt>
				<tooltip><![CDATA[If 'Y', exclude queries from background processes]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_PLAN_DISPLAY_FORMAT">
				<prompt><![CDATA[Plan display format?]]></prompt>
				<tooltip><![CDATA[Plan display format; default: Advanced -projection +allstats last]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_SPOOL_DIRECTORY">
				<prompt><![CDATA[Spool directory?]]></prompt>
				<tooltip><![CDATA[Directory where ACTIVE reports will be spooled]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="B_DEFAULT_SPOOL_DIRECTORY">
				<prompt><![CDATA[Default spool directory?]]></prompt>
				<tooltip><![CDATA[Default spool directory]]></tooltip>
				<!--##USER_CONFIG##--><value><![CDATA[E:\Home\romain\SQL_Developer\output\sql_mon]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
		</binds>
	</query>
	<display id="null" type="" style="Table" enable="true">
		<name><![CDATA[SQL Plan (cursor cache)]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
			<TYPE><![CDATA[horizontal]]></TYPE>
		</CustomValues>
        <queries>
            <query minversion="19.0">
                <sql><![CDATA[with child_cursor as (
    select 
        sql_id, child_number
    from 
        v$sql
    where
        sql_id = :SQL_ID
        and lnnvl(plan_hash_value <> :PLAN_HASH)
        and lnnvl(plan_hash_value = 0)
    order by
        last_active_time desc
    fetch first 1 row only
)
select b.* 
from 
    child_cursor a,
    table(dbms_xplan.display_cursor(
            sql_id => a.sql_id,
            cursor_child_no => a.child_number,
            format => nvl(:PLAN_DISPLAY_FMT, 'Advanced +adaptive -projection -qbregistry +allstats last')
    )) b]]></sql>
                <binds>
                    <bind id="SQL_ID">
                        <prompt><![CDATA[SQL_ID]]></prompt>
                        <tooltip><![CDATA[SQL_ID]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                    <bind id="PLAN_HASH">
                        <prompt><![CDATA[PLAN_HASH]]></prompt>
                        <tooltip><![CDATA[PLAN_HASH]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                    <bind id="PLAN_DISPLAY_FMT">
                        <prompt><![CDATA[PLAN_DISPLAY_FMT]]></prompt>
                        <tooltip><![CDATA[PLAN_DISPLAY_FMT]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                </binds>
            </query>
            <query minversion="12.1">
                <sql><![CDATA[with child_cursor as (
    select 
        sql_id, child_number
    from 
        v$sql
    where
        sql_id = :SQL_ID
        and lnnvl(plan_hash_value <> :PLAN_HASH)
        and lnnvl(plan_hash_value = 0)
    order by
        last_active_time desc
    fetch first 1 row only
)
select b.* 
from 
    child_cursor a,
    table(dbms_xplan.display_cursor(
            sql_id => a.sql_id,
            cursor_child_no => a.child_number,
            format => nvl(:PLAN_DISPLAY_FMT, 'Advanced +adaptive -projection +allstats last')
    )) b]]></sql>
                <binds>
                    <bind id="SQL_ID">
                        <prompt><![CDATA[SQL_ID]]></prompt>
                        <tooltip><![CDATA[SQL_ID]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                    <bind id="PLAN_HASH">
                        <prompt><![CDATA[PLAN_HASH]]></prompt>
                        <tooltip><![CDATA[PLAN_HASH]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                    <bind id="PLAN_DISPLAY_FMT">
                        <prompt><![CDATA[PLAN_DISPLAY_FMT]]></prompt>
                        <tooltip><![CDATA[PLAN_DISPLAY_FMT]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                </binds>
            </query>
        </queries>
	</display>
	<display id="null" type="" style="Table" enable="true">
		<name><![CDATA[SQL Plan (AWR)]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
			<TYPE><![CDATA[horizontal]]></TYPE>
		</CustomValues>
        <queries>
            <query minversion="19.0">
                <sql><![CDATA[with hist_plan as (
    select 
        dbid, sql_id, plan_hash_value
    from 
        dba_hist_sql_plan
    where
        sql_id = :SQL_ID
        and plan_hash_value = :PLAN_HASH
        and rownum <= 1
)
select b.* 
from 
    hist_plan a,
    table(dbms_xplan.display_awr(
            sql_id => a.sql_id,
            plan_hash_value => a.plan_hash_value,
            format => nvl(:PLAN_DISPLAY_FMT, 'Advanced +adaptive -qbregistry')
    )) b]]></sql>
                <binds>
                    <bind id="SQL_ID">
                        <prompt><![CDATA[SQL_ID]]></prompt>
                        <tooltip><![CDATA[SQL_ID]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                    <bind id="PLAN_HASH">
                        <prompt><![CDATA[PLAN_HASH]]></prompt>
                        <tooltip><![CDATA[PLAN_HASH]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                    <bind id="PLAN_DISPLAY_FMT">
                        <prompt><![CDATA[PLAN_DISPLAY_FMT]]></prompt>
                        <tooltip><![CDATA[PLAN_DISPLAY_FMT]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                </binds>
            </query>
            <query minversion="12.1">
                <sql><![CDATA[with hist_plan as (
    select 
        dbid, sql_id, plan_hash_value
    from 
        dba_hist_sql_plan
    where
        sql_id = :SQL_ID
        and plan_hash_value = :PLAN_HASH
        and rownum <= 1
)
select b.* 
from 
    hist_plan a,
    table(dbms_xplan.display_awr(
            sql_id => a.sql_id,
            plan_hash_value => a.plan_hash_value,
            format => nvl(:PLAN_DISPLAY_FMT, 'Advanced +adaptive')
    )) b]]></sql>
                <binds>
                    <bind id="SQL_ID">
                        <prompt><![CDATA[SQL_ID]]></prompt>
                        <tooltip><![CDATA[SQL_ID]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                    <bind id="PLAN_HASH">
                        <prompt><![CDATA[PLAN_HASH]]></prompt>
                        <tooltip><![CDATA[PLAN_HASH]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                    <bind id="PLAN_DISPLAY_FMT">
                        <prompt><![CDATA[PLAN_DISPLAY_FMT]]></prompt>
                        <tooltip><![CDATA[PLAN_DISPLAY_FMT]]></tooltip>
                        <value><![CDATA[NULL_VALUE]]></value>
                        <bracket><![CDATA[null]]></bracket>
                    </bind>
                </binds>
            </query>
        </queries>
	</display>
	<display id="null" type="" style="Script" enable="true">
		<name><![CDATA[SQL Monitoring Report (text)]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
		</CustomValues>
		<query>
			<sql><![CDATA[whenever sqlerror exit failure rollback
whenever oserror exit failure rollback

set termout off
-- This would trigger the HIGH_LONG_MEM_WARNING message if TERMOUT was ON
set long 5000000
set termout on
set linesize 600
set heading off
set feedback off
set pagesize 0

column sql_monitor_report format a600 word_wrapped

select
    dbms_auto_report.report_repository_detail(
        rid => :REPORT_ID,
        type => 'TEXT'
    ) as sql_monitor_report
from dual
where
    :REPORT_ID is not null]]></sql>
			<binds>
				<bind id="REPORT_ID">
					<prompt><![CDATA[REPORT_ID]]></prompt>
					<tooltip><![CDATA[REPORT_ID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
			</binds>
		</query>
	</display>
	<display id="null" type="" style="Script" enable="true">
		<name><![CDATA[SQL Monitoring Report (active)]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
		</CustomValues>
		<query>
			<sql><![CDATA[whenever sqlerror exit failure rollback
whenever oserror exit failure rollback

set termout off
-- This would trigger the HIGH_LONG_MEM_WARNING message if TERMOUT was ON
set long 5000000
set termout on
set linesize 10000
set trimspool on
set heading off
set feedback off
set pagesize 0

set termout off
set verify off

define spool_directory
define spool_filename

column spool_directory noprint new_value spool_directory
column spool_filename noprint new_value spool_filename

select :SPOOL_DIRECTORY as spool_directory from dual 
where :SPOOL_DIRECTORY is not null;

select 'sql_mon-'
            || sys_context('USERENV', 'DB_NAME')
            || '-' || :SQL_ID
            || '-' || to_char(:SQL_EXEC_ID)
            || '-' || to_char(to_date(:SQL_EXEC_START, 'YYYY-MM-DD HH24:MI:SS'), 'YYYYMMDD_HH24MISS')
            || '-' || to_char(:REPORT_ID)
            || '.html'
    as spool_filename 
from dual
where :SPOOL_DIRECTORY is not null;

cd "&spool_directory"

spool "&spool_filename"

column sql_monitor_report format a600 word_wrapped

select
    dbms_auto_report.report_repository_detail(
        rid => :REPORT_ID,
        type => 'ACTIVE'
    ) as sql_monitor_report
from dual
where
    :SPOOL_DIRECTORY is not null
    and :REPORT_ID is not null
;

spool off

set termout on

select 'SQL Monitoring report created: ' 
    || '&spool_filename' || chr(10)
    || '(directory: &spool_directory)'
from dual
where :SPOOL_DIRECTORY is not null;]]></sql>
			<binds>
				<bind id="SPOOL_DIRECTORY">
					<prompt><![CDATA[SPOOL_DIRECTORY]]></prompt>
					<tooltip><![CDATA[SPOOL_DIRECTORY]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="SQL_ID">
					<prompt><![CDATA[SQL_ID]]></prompt>
					<tooltip><![CDATA[SQL_ID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="SQL_EXEC_ID">
					<prompt><![CDATA[SQL_EXEC_ID]]></prompt>
					<tooltip><![CDATA[SQL_EXEC_ID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="SQL_EXEC_START">
					<prompt><![CDATA[SQL_EXEC_START]]></prompt>
					<tooltip><![CDATA[SQL_EXEC_START]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="REPORT_ID">
					<prompt><![CDATA[REPORT_ID]]></prompt>
					<tooltip><![CDATA[REPORT_ID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
			</binds>
		</query>
	</display>
	<display id="null" type="" style="Script" enable="true">
		<name><![CDATA[SQL Monitoring Report (xml)]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
		</CustomValues>
		<query>
			<sql><![CDATA[whenever sqlerror exit failure rollback
whenever oserror exit failure rollback

set termout off
-- This would trigger the HIGH_LONG_MEM_WARNING message if TERMOUT was ON
set long 5000000
set termout on
set linesize 32767
set trimspool on
set heading off
set feedback off
set pagesize 0

set termout off
set verify off

define spool_directory
define spool_filename

column spool_directory noprint new_value spool_directory
column spool_filename noprint new_value spool_filename

select :SPOOL_DIRECTORY as spool_directory from dual 
where :SPOOL_DIRECTORY is not null;

select 'sql_mon-'
            || sys_context('USERENV', 'DB_NAME')
            || '-' || :SQL_ID
            || '-' || to_char(:SQL_EXEC_ID)
            || '-' || to_char(to_date(:SQL_EXEC_START, 'YYYY-MM-DD HH24:MI:SS'), 'YYYYMMDD_HH24MISS')
            || '-' || to_char(:REPORT_ID)
            || '.xml'
    as spool_filename 
from dual
where :SPOOL_DIRECTORY is not null;

cd "&spool_directory"

spool "&spool_filename"

column sql_monitor_report format a32000 word_wrapped

/*
    Remark: WORD_WRAPPED does not guarantee that the readout will
    still be well-formed XML: there are unlucky cases with CDATA
    sections, where the characters "<!" are put on the end of one
    line and "[DATA[...]>" on the beginning of the next, which
    breaks the XML format. :-(

    TODO: pipe the CLOB through a custom PL/SQL pipelined function
    in order to do the line-splitting in a more XML-friendly way.
    (This is left as an exercise to the reader.)
*/

select
    dbms_auto_report.report_repository_detail(
        rid => :REPORT_ID,
        type => 'XML'
    ) as sql_monitor_report
from dual
where
    :SPOOL_DIRECTORY is not null
    and :REPORT_ID is not null
;

spool off

set termout on

select 'SQL Monitoring report created: ' 
    || '&spool_filename' || chr(10)
    || '(directory: &spool_directory)'
from dual
where :SPOOL_DIRECTORY is not null;]]></sql>
			<binds>
				<bind id="SPOOL_DIRECTORY">
					<prompt><![CDATA[SPOOL_DIRECTORY]]></prompt>
					<tooltip><![CDATA[SPOOL_DIRECTORY]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="SQL_ID">
					<prompt><![CDATA[SQL_ID]]></prompt>
					<tooltip><![CDATA[SQL_ID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="SQL_EXEC_ID">
					<prompt><![CDATA[SQL_EXEC_ID]]></prompt>
					<tooltip><![CDATA[SQL_EXEC_ID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="SQL_EXEC_START">
					<prompt><![CDATA[SQL_EXEC_START]]></prompt>
					<tooltip><![CDATA[SQL_EXEC_START]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="REPORT_ID">
					<prompt><![CDATA[REPORT_ID]]></prompt>
					<tooltip><![CDATA[REPORT_ID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
			</binds>
		</query>
	</display>
</display>
</folder>
</displays>
