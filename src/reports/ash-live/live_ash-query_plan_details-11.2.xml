<?xml version="1.0" encoding="UTF-8" ?>
<displays>
<display id="cc71914f-0178-1000-8007-c0a8010c27da" type="" style="Script" enable="true">
	<name><![CDATA[Live ASH - Query plan details [11.2]]]></name>
	<description><![CDATA[]]></description>
	<tooltip><![CDATA[]]></tooltip>
	<drillclass><![CDATA[]]></drillclass>
	<CustomValues>
	</CustomValues>
	<query>
		<sql><![CDATA[set pagesize 50000
set linesize 300
set heading on
set feedback on
set trimout on
set verify off

define report_sqlid = ""
define report_plan_hash_value = ""
define report_from_time = ""
define report_to_time = ""
define report_plan_display_opt = ""

column report_sqlid             new_value report_sqlid             noprint
column report_plan_hash_value   new_value report_plan_hash_value   noprint
column report_from_time         new_value report_from_time         noprint
column report_to_time           new_value report_to_time           noprint
column report_plan_display_opt  new_value report_plan_display_opt  noprint

set termout off

select 
    :SQL_ID                           as report_sqlid,
    nvl(:PLAN_HASH_VALUE, '--any--')  as report_plan_hash_value,
    to_char(
        nvl( to_date(:FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'),
             (select oldest_sample_time from v$ash_info) ),
        'YYYY-MM-DD HH24:MI:SS'
    )                                 as report_from_time,
    to_char(
        nvl( to_date(:TO_TIME, 'YYYY-MM-DD HH24:MI:SS'), sysdate ),
        'YYYY-MM-DD HH24:MI:SS'
    )                                 as report_to_time
from
    dual;

select
    nvl( :PLAN_DISPLAY_OPTIONS, 'Advanced -projection')  as report_plan_display_opt
from
    dual;

set termout on

prompt SQL Id   :  &&report_sqlid
prompt Plan hash:  &&report_plan_hash_value
prompt From time:  &&report_from_time
prompt To time  :  &&report_to_time
prompt
prompt Plan opt.:  &&report_plan_display_opt
prompt

prompt +==========================================+
prompt |  ASH samples aggregated by plan line id  |
prompt +------------------------------------------+

column line_id  format 9999999
column %LINE    format 99999
column event    format a45   word_wrapped
column samp_px  format 999999.9
column #EXEC_ID format 9999999

break on sql_id noduplicates on plan_hash_value skip 1 noduplicates on line_id noduplicates on plan_operation noduplicates on plan_option noduplicates

with
ash_samples as (
    select
        a.sql_id,
        a.sql_plan_hash_value   as plan_hash_value,
        a.sql_plan_line_id,
        a.sql_plan_operation,
        a.sql_plan_options,
        a.sql_exec_id,
        a.sql_exec_start,
        a.event,
        a.session_state
    from
        v$active_session_history a
    where
        a.is_sqlid_current = 'Y'
        and a.sql_exec_id is not null
        and a.sql_exec_start is not null
        and a.sql_id = :SQL_ID
        and (:PLAN_HASH_VALUE is null or a.sql_plan_hash_value = :PLAN_HASH_VALUE)
        and a.sample_time >= nvl( to_date(:FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'),
                                  (select oldest_sample_time from v$ash_info) )
        and a.sample_time <= nvl( to_date(:TO_TIME, 'YYYY-MM-DD HH24:MI:SS'), sysdate )

),
ash_details as (
    select
        a.sql_id,
        a.plan_hash_value,
        a.sql_plan_line_id,
        a.sql_plan_operation,
        a.sql_plan_options,
        case
            when a.session_state = 'ON CPU' then a.session_state 
            else a.event 
        end                     as event,
        count(*)                as cnt_samp_evt,
        sum(count(*)) over 
                (partition by 
                    a.sql_id,
                    a.plan_hash_value, 
                    a.sql_plan_line_id)         as cnt_samp_line,
        100 * ratio_to_report(count(*)) over 
                (partition by 
                    a.sql_id,
                    a.plan_hash_value)          as pct_line_evt
    from
        ash_samples a
    group by
        a.sql_id,
        a.plan_hash_value,
        a.sql_plan_line_id,
        a.sql_plan_operation,
        a.sql_plan_options,
        case
            when a.session_state = 'ON CPU' then a.session_state
            else a.event
        end
),
ash_execs as (
    select
        a.sql_id,
        a.plan_hash_value,
        count(distinct a.sql_exec_id || ',' 
                || to_char(a.sql_exec_start, 'YYYY-MM-DD HH24:MI:SS'))  as cnt_exec_id,
        count(*)                                                        as total_samples
    from
        ash_samples a
    group by
        a.sql_id,
        a.plan_hash_value
),
ash_details_wt_execs as (
    select
        a.sql_id,
        a.plan_hash_value,
        a.sql_plan_line_id,
        a.sql_plan_operation,
        a.sql_plan_options,
        a.cnt_samp_line,
        case
            when a.pct_line_evt >= 5
            then a.event || ' (' || a.cnt_samp_evt || ')' 
        end                                 as event,
        row_number() over
                (partition by
                    a.sql_id,
                    a.plan_hash_value,
                    a.sql_plan_line_id
                order by
                    case 
                        when a.pct_line_evt >= 5 
                        then a.pct_line_evt 
                    end desc nulls last, 
                    a.event)                as evt_rank,
        b.cnt_exec_id,
        b.total_samples
    from
        ash_details a,
        ash_execs b
    where
        a.sql_id = b.sql_id
        and a.plan_hash_value = b.plan_hash_value
),
ash_synth as (
    select
        sql_id,
        plan_hash_value,
        sql_plan_line_id,
        sql_plan_operation,
        sql_plan_options,
        case when evt_rank = 1 then cnt_samp_line end   as cnt_samp_line,
        sum( case when evt_rank = 1 then cnt_samp_line end ) 
                over (partition by sql_id,
                    plan_hash_value
                order by 
                    sql_plan_line_id asc,
                    evt_rank asc)                       as running_total_samp,
        event,
        evt_rank,
        cnt_exec_id,
        total_samples
    from
        ash_details_wt_execs
    where
        event is not null or evt_rank <= 1
),
ash_synth2 as (
    select
        sql_id,
        plan_hash_value,
        sql_plan_line_id,
        sql_plan_operation,
        sql_plan_options,
        event,
        round(100 * cnt_samp_line / total_samples)  as pct_line,
        cnt_samp_line,
        round(cnt_samp_line / cnt_exec_id,
                case 
                    when cnt_exec_id = 1 then 0
                    when total_samples <= 2 * cnt_exec_id  then 2
                    when total_samples <= 20 * cnt_exec_id then 1
                    else 0
                end)  as samp_px,
        evt_rank,
        cnt_exec_id,
        running_total_samp,
        round(sum(cnt_samp_line) over
                    (partition by
                        sql_id,
                        plan_hash_value
                    order by 
                        sql_plan_line_id asc, 
                        evt_rank asc)
                / total_samples
                * 100
             )        as tot_pct_line
    from
        ash_synth
)
select
    sql_id,
    plan_hash_value         as plan_hash_value,
    sql_plan_line_id        as line_id,
    sql_plan_operation      as plan_operation,
    sql_plan_options        as plan_option,
    event,
    pct_line                as "%LINE",
    samp_px,
    cnt_samp_line           as samples,
    case
        when evt_rank = 1
        then cnt_exec_id
    end                     as "#EXEC_ID",
    case
        when evt_rank = 1
        then running_total_samp
    end                     as total_samp,
    case
        when evt_rank = 1
        then tot_pct_line
    end                     as "SUM(%LINE)"
from
    ash_synth2
order by
    plan_hash_value,
    sql_plan_line_id asc,
    evt_rank asc
;


/*=============================*/
/* Plans from the cursor cache */
/*-----------------------------*/

prompt
prompt +===============================+
prompt |  Plans from the cursor cache  |
prompt +-------------------------------+

set heading off

with
ash_plan as (
    select distinct
        a.sql_id,
        a.sql_plan_hash_value  as plan_hash_value
    from
        v$active_session_history a
    where
        a.is_sqlid_current = 'Y'
        and a.sql_exec_id is not null
        and a.sql_exec_start is not null
        and a.sql_id = :SQL_ID
        and (:PLAN_HASH_VALUE is null or a.sql_plan_hash_value = :PLAN_HASH_VALUE)
        and a.sample_time >= nvl( to_date(:FROM_TIME, 'YYYY-MM-DD HH24:MI:SS'),
                                  (select oldest_sample_time from v$ash_info) )
        and a.sample_time <= nvl( to_date(:TO_TIME, 'YYYY-MM-DD HH24:MI:SS'), sysdate )
),
chld_cursor as (
    select 
        a.sql_id, a.child_number,
        row_number() over (partition by a.sql_id, a.plan_hash_value
                           order by a.last_active_time desc) as rn
    from
        v$sql a,
        ash_plan b
    where
        a.sql_id = b.sql_id
        and a.plan_hash_value = b.plan_hash_value
)
select b.*
from 
    chld_cursor a,
    table(dbms_xplan.display_cursor(
            a.sql_id, 
            a.child_number, 
            '&&report_plan_display_opt'
    )) b
where
    a.rn = 1
;]]></sql>
		<binds>
			<bind id="SQL_ID">
				<prompt><![CDATA[SQL id?]]></prompt>
				<tooltip><![CDATA[Target SQL id]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="PLAN_HASH_VALUE">
				<prompt><![CDATA[Plan hash value?]]></prompt>
				<tooltip><![CDATA[Filter on the specified plan hash value; default: no filtering]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="FROM_TIME">
				<prompt><![CDATA[From time?]]></prompt>
				<tooltip><![CDATA[Format: YYYY-MM-DD HH24:MI:SS; default: earliest ASH sample]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="TO_TIME">
				<prompt><![CDATA[To time?]]></prompt>
				<tooltip><![CDATA[Format: YYYY-MM-DD HH24:MI:SS; default: latest ASH sample]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
			<bind id="PLAN_DISPLAY_OPTIONS">
				<prompt><![CDATA[Plan display options?]]></prompt>
				<tooltip><![CDATA[Default: Advanced -projection]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
		</binds>
	</query>
		<pdf version="VERSION_1_7" compression="CONTENT">
			<docproperty title="" author="" subject="" keywords="" />
			<cell toppadding="2" bottompadding="2" leftpadding="2" rightpadding="2" horizontalalign="LEFT" verticalalign="TOP" wrap="true" />
			<column>
				<heading font="null" size="10" style="NORMAL" color="-16777216" rowshading="-1" labeling="FIRST_PAGE" />
				<footing font="null" size="10" style="NORMAL" color="-16777216" rowshading="-1" labeling="NONE" />
				<blob blob="NONE" zip="false" />
			</column>
			<table font="Times New Roman" size="10" style="NORMAL" color="-16777216" userowshading="false" oddrowshading="-1" evenrowshading="-1" showborders="true" spacingbefore="12" spacingafter="12" horizontalalign="LEFT" />
			<header enable="false" generatedate="false">
				<data>
				
					
					null														</data>
			</header>
			<footer enable="false" generatedate="false">
				<data value="null" />
			</footer>
			<pagesetup papersize="LETTER" orientation="1" measurement="in" margintop="1.0" marginbottom="1.0" marginleft="1.0" marginright="1.0" />
		</pdf>
</display>
</displays>
