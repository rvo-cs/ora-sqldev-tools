<?xml version="1.0" encoding="UTF-8" ?>
<displays>
<display id="22df510e-0167-1000-8001-c0a838010cc2" type="" style="Chart" enable="true">
	<name><![CDATA[GV$ - Host CPU usage and %busy ]]></name>
	<description><![CDATA[Last hour chart of metrics 'Host CPU Utilization (%)' and 'Host CPU Usage Per Sec' from gv$sysmetric_history.
Requires READ on gv$sysmetric_history.]]></description>
	<tooltip><![CDATA[]]></tooltip>
	<drillclass><![CDATA[]]></drillclass>
	<CustomValues>
		<PLOT_HGRID_WIDTH><![CDATA[THINNER]]></PLOT_HGRID_WIDTH>
		<Y1AXIS_SCALE_INCREMENT><![CDATA[10.0]]></Y1AXIS_SCALE_INCREMENT>
		<Y2AXIS_SCALE_MAXIMUM><![CDATA[64.0]]></Y2AXIS_SCALE_MAXIMUM>
		<Y1AXIS_LINE_WIDTH><![CDATA[THINNEST]]></Y1AXIS_LINE_WIDTH>
		<Y1AXIS_TITLE_ALIGNMENT><![CDATA[CENTER]]></Y1AXIS_TITLE_ALIGNMENT>
		<LEGEND_LOCATION><![CDATA[AUTOMATIC]]></LEGEND_LOCATION>
		<PLOT_SERIES_OPTIONS_COLOR><![CDATA[\,-65536,-65536,-10066279,-16751002,-26368]]></PLOT_SERIES_OPTIONS_COLOR>
		<LEGEND_ALIGNMENT><![CDATA[LEFT]]></LEGEND_ALIGNMENT>
		<GRADIENT><![CDATA[false]]></GRADIENT>
		<XAXIS_LINE_WIDTH><![CDATA[THINNEST]]></XAXIS_LINE_WIDTH>
		<DATA_MAP_COLUMNS><![CDATA[\,"END_TIME","END_TIME"]]></DATA_MAP_COLUMNS>
		<Y1AXIS_SCALE_MAXIMUM><![CDATA[80.0]]></Y1AXIS_SCALE_MAXIMUM>
		<XAXIS_TITLE_ALIGNMENT><![CDATA[CENTER]]></XAXIS_TITLE_ALIGNMENT>
		<XAXIS_TICK_LABEL_ROTATE><![CDATA[HORIZONTAL]]></XAXIS_TICK_LABEL_ROTATE>
		<Y1AXIS_LOGARITHMIC_BASE><![CDATA[BASE_10]]></Y1AXIS_LOGARITHMIC_BASE>
		<TYPE><![CDATA[LINE_VERT_ABS_2Y]]></TYPE>
		<GRID_WIDTH><![CDATA[THINNER]]></GRID_WIDTH>
		<FOOTNOTE_ALIGNMENT><![CDATA[LEFT]]></FOOTNOTE_ALIGNMENT>
		<XAXIS_TICK_LABEL_SKIP_MODE><![CDATA[AUTOMATIC]]></XAXIS_TICK_LABEL_SKIP_MODE>
		<DATA_MAP_COLNAMES><![CDATA[\,"CPU_BUSY_PCT_VALUE","CPU_CSEC_PER_SEC_VALUE","END_TIME"]]></DATA_MAP_COLNAMES>
		<DATA_MAP_SERIES><![CDATA[\,CPU csec/sec,CPU %busy]]></DATA_MAP_SERIES>
		<Y2AXIS_LOGARITHMIC_BASE><![CDATA[BASE_10]]></Y2AXIS_LOGARITHMIC_BASE>
		<DATA_MAP_COUNT><![CDATA[2]]></DATA_MAP_COUNT>
		<STYLE><![CDATA[Default]]></STYLE>
		<TITLE_ALIGNMENT><![CDATA[LEFT]]></TITLE_ALIGNMENT>
		<Y2AXIS_TICK_LABEL_ROTATE><![CDATA[HORIZONTAL]]></Y2AXIS_TICK_LABEL_ROTATE>
		<PLOT_SERIES_OPTIONS_LINE_WIDTH><![CDATA[\,THINNER,THINNEST,THICKER,THICKER,THICKER]]></PLOT_SERIES_OPTIONS_LINE_WIDTH>
		<Y2AXIS_LINE_WIDTH><![CDATA[THINNEST]]></Y2AXIS_LINE_WIDTH>
		<DATA_MAP_VALUES><![CDATA[\,"CPU_CSEC_PER_SEC_VALUE","CPU_BUSY_PCT_VALUE"]]></DATA_MAP_VALUES>
		<Y1AXIS_TICK_LABEL_ROTATE><![CDATA[HORIZONTAL]]></Y1AXIS_TICK_LABEL_ROTATE>
		<Y2AXIS_SCALE_INCREMENT><![CDATA[8.0]]></Y2AXIS_SCALE_INCREMENT>
		<PLOT_VGRID_WIDTH><![CDATA[THINNER]]></PLOT_VGRID_WIDTH>
		<Y2AXIS_TITLE_ALIGNMENT><![CDATA[CENTER]]></Y2AXIS_TITLE_ALIGNMENT>
		<SUBTITLE_ALIGNMENT><![CDATA[LEFT]]></SUBTITLE_ALIGNMENT>
	</CustomValues>
	<query>
		<sql><![CDATA[with 
metric_names as (
    select 'Host CPU Utilization (%)' as metric_name from dual
    union all
    select 'Host CPU Usage Per Sec' as metric_name from dual
),
metrics as (
    select 
        a.begin_time, a.end_time, a.metric_name, a.intsize_csec, a.value,
        a.group_id -- 2 => intsize_csec = 6000, 3 => intsize_csec = 1500 (better)
    from
        gv$sysmetric_history a, metric_names b
    where
        a.inst_id = nvl(:INST_ID, sys_context('USERENV', 'INSTANCE'))
        and a.metric_name = b.metric_name
),
time_ref as (
    select /*+ no_merge */ sysdate as end_time from dual
),
time_slots as (
    select 
        4 * 60 - level as sn,
        end_time + (15 * (0 - level)) / 86400 as begin_time,
        end_time + (15 * (1 - level)) / 86400 as end_time
    from 
        time_ref
    connect by 
        level <= 4*60
),
dense_metrics as (
    select 
        sn, begin_time, end_time, 
        metric_name, value,
        last_value(value) ignore nulls 
                over (partition by metric_name order by sn
                    rows between unbounded preceding and current row) as prev_value,
        last_value(nvl2(value, end_time, null)) ignore nulls 
                over (partition by metric_name order by sn
                    rows between unbounded preceding and current row) as prev_end_time,
        first_value(value) ignore nulls 
                over (partition by metric_name order by sn
                    rows between current row and unbounded following) as next_value,
        first_value(nvl2(value, end_time, null)) ignore nulls 
                over (partition by metric_name order by sn
                    rows between current row and unbounded following) as next_end_time
    from
        (select
            a.sn, a.begin_time, a.end_time,
            b.metric_name, c.value,
            row_number() over (partition by a.sn, b.metric_name 
                    order by nvl2(c.value, c.group_id, null) desc nulls last) as rank
        from
            (time_slots a
            cross join
            metric_names b)
            left outer join
            metrics c on
                c.end_time > a.begin_time
                and c.end_time <= a.end_time
                and c.metric_name = b.metric_name
        )
    where rank = 1
),
interpolated_metrics as (
    select
        end_time,
        metric_name,
        case when value is not null then value
            else prev_value 
                    + (next_value - prev_value)
                    * ((end_time - prev_end_time) / (next_end_time - prev_end_time))
            end as value
    from
        dense_metrics
)
select
    end_time,
    cpu_csec_per_sec_value,
    cpu_busy_pct_value
from
    interpolated_metrics
pivot 
    (sum(value) as value for metric_name in (
        'Host CPU Usage Per Sec' as cpu_csec_per_sec,
        'Host CPU Utilization (%)' as cpu_busy_pct
    ))
order by end_time asc]]></sql>
		<binds>
			<bind id="INST_ID">
				<prompt><![CDATA[Inst. id?]]></prompt>
				<tooltip><![CDATA[Instance id? (NULL = current instance)]]></tooltip>
				<value><![CDATA[NULL_VALUE]]></value>
				<bracket><![CDATA[null]]></bracket>
			</bind>
		</binds>
	</query>
</display>
</displays>
